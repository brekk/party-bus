import type { Comparison } from "Compare"

import type { Tag } from "@/Tag"

import { EQ, GT, LT, gt, lt } from "Compare"
import { complement, equals } from "Function"
import List from "List"
import { fromMaybe } from "Maybe"
import String from "String"

import { Tag, tag, tagWithScope } from "@/Tag"
import { NoScope, scopeFromList, scopeWithinScope } from "@/Tag/Scope"



export type Query = AnyTag | NoTag | Not(Tag) | Exact(Tag)
instance Comparable Query {
  compare = compareQuery
}

// SUGAR

exact :: String -> Query
export exact = pipe(
  tag,
  Exact,
)

exactWithScope :: String -> List String -> Query
export exactWithScope = (t, sc) => pipe(
  tagWithScope(t),
  Exact,
)(sc)

not :: String -> Query
export not = pipe(
  tag,
  Not,
)

notWithScope :: String -> List String -> Query
export notWithScope = (t, sc) => pipe(
  tagWithScope(t),
  Not,
)(sc)

_firstAsString :: List String -> String
_firstAsString = pipe(
  List.first,
  fromMaybe(""),
)

fromString :: String -> Query
export fromString = (_part) => if (_part == "*") {
  AnyTag
} else if (_part == "") {
  NoTag
} else do {
  pos = String.startsWith("-", _part)
  part = if (pos) {
    String.drop(1, _part)
  } else {
    _part
  }
  return pipe(
    String.trim,
    String.split(":"),
    List.reject(equals("")),
    (list) => {
      listLen = List.length(list)
      seg = listLen == 1 ? [] : List.tail(list)
      return pipe(
        _firstAsString,
        Tag($, scopeFromList(seg)),
        pos ? Not : Exact,
      )(list)
    },
  )(part)
}

compareQuery :: Query -> Query -> Comparison
export compareQuery = (a, b) => where(#[a, b]) {
  #[AnyTag, _] =>
    GT

  #[_, AnyTag] =>
    GT

  #[Exact(Tag(aName, NoScope)), Exact(Tag(bName, _))] =>
    aName == bName ? GT : EQ

  #[Exact(Tag(aName, aScope)), Exact(Tag(bName, bScope))] =>
    if (bName == aName) {
      if (scopeWithinScope(aScope, bScope)) {
        GT
      } else {
        LT
      }
    } else {
      LT
    }

  // we only care if the names match and one is negated

  #[Exact(Tag(aName, _)), Not(Tag(bName, _))] =>
    aName == bName ? LT : EQ

  #[Not(Tag(aName, _)), Exact(Tag(bName, _))] =>
    aName == bName ? LT : EQ

  _ =>
    LT
}

manyFromString :: String -> List Query
export manyFromString = pipe(
  String.split(","),
  List.reject(equals("")),
  map(fromString),
  List.reject(equals(NoTag)),
)

isNegated :: Query -> Boolean
export isNegated = where {
  Not(_) =>
    true

  _ =>
    false
}

isWild :: Query -> Boolean
export isWild = where {
  AnyTag =>
    true

  _ =>
    false
}

import IO from "IO"



anyTagMatches :: List Query -> Query -> Boolean
export anyTagMatches = (xs, t) => {
  trace = (msg, u) => where(t) {
    Exact(Tag(x, _)) =>
      if (x == "scorpion" || x == "spider") {
        if (String.contains("over", msg)) {
          IO.pTrace(IO.yellow(msg), u)
        } else {
          IO.pTrace(IO.green(msg), u)
        }
      } else {
        u
      }

    _ =>
      u
  }
  under = pipe(
    List.filter(lt($, t)),
    trace("under"),
  )(xs)
  noneUnder = pipe(
    List.isEmpty,
    trace("\tmatched under"),
  )(under)
  over = pipe(
    List.filter(gt($, t)),
    trace("over"),
  )(xs)
  someOver = pipe(
    complement(List.isEmpty),
    trace("\tmatched over"),
  )(over)
  if (someOver || noneUnder) do {
    matches = List.any((o) => List.any(lt($, o), over))(under)
    IO.pTrace("MATCHES", matches)
  }
  return someOver && noneUnder
}

checkEnvironment :: List Query -> Tag -> Boolean
export checkEnvironment = (legend, t) => anyTagMatches(legend, Exact(t))
