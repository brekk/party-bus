import type { Config, Decorator, PartyPredicate, SideEffect } from "@/Core"
import type { Query } from "@/Query"
import type { Tag } from "@/Tag"
import type { Scope } from "@/Tag/Scope"

import Dict from "Dictionary"
import { identity } from "Function"
import IO from "IO"
import List from "List"
import { fromMaybe } from "Maybe"
import Process from "Process"

import {
  always,
  colorizeTag,
  confChange,
  confCheck,
  confDecorator,
  confEffect,
  confSeed,
  configurate,
  decorateRaw,
  decorateWithStyle,
  decorateWithStyleAndDate,
  signalWithConfig,
} from "@/Core"
import { getEnvWithKey } from "@/Env"
import { checkEnvironment } from "@/Query"
import { Tag, tag, tagWithScope } from "@/Tag"



export type Tag
export type Scope
export type Config
export type Decorator
export type PartyPredicate
export type SideEffect
export type Query

// re-export the Core
export always
export colorizeTag
export confChange
export confCheck
export confDecorator
export confEffect
export confSeed
export configurate
export decorateRaw
export decorateWithStyle
export decorateWithStyleAndDate
export signalWithConfig
export tag
export tagWithScope

/**
 * The default config to use when invoking the bus, shorthand for:
 * Call IO.pTrace unconditionally, with no change to the value passing through. 
 * @since 0.0.1
 */
export DEFAULT_CONFIG = {
  seed: "party-bus",
  decorate: decorateRaw,
  check: always,
  effect: IO.pTrace,
  change: identity,
}

// we don't test this because it's wired to IO
/**
 * signalWithConfig minus the config
 * @since 0.0.1
 */
signal :: Show a => Tag -> String -> a -> a
export signal = signalWithConfig(DEFAULT_CONFIG)

/**
 * An alternative config based on the default config with a styled decorator
 * @since 0.0.1
 */
export STYLED_CONFIG = {
  seed: "party-bus",
  decorate: decorateWithStyle,
  effect: IO.pTrace,
  change: identity,
  check: always,
}

// we don't test this because it's wired to IO
/**
 * Call signal with a colorized serialized tag prepended to the message
 * @since 0.0.1
 */
export taggedSignal = signalWithConfig(STYLED_CONFIG)

/**
 * An alternative config based on the default config with a styled and dated config
 * @since 0.0.1
 */
export DATED_CONFIG = {
  seed: "party-bus",
  decorate: decorateWithStyleAndDate,
  effect: IO.pTrace,
  change: identity,
  check: always,
}

// we don't test this because it's wired to IO
/**
 * Call signal with a colorized serialized tag and date prepended to the message
 * @since 0.0.1
 */
export dateTaggedSignal = signalWithConfig(DATED_CONFIG)

/**
 * signalWithConfig, but wired to a list of queries
 * @since 0.0.1
 */
partyBus :: List Query -> Config -> Tag -> String -> a -> a
export partyBus = (legend, config, t, msg, x) => signalWithConfig(
  confCheck(
    (_tag, _msg, _x) => checkEnvironment(legend, _tag) && config.check(_tag, _msg, _x),
    config,
  ),
  t,
  msg,
  x,
)

/**
 * partyBus, but wired to a dictionary of string keys to parse
 * @since 0.0.1
 */
envFrom :: Dictionary String String -> String -> Config -> Tag -> String -> a -> a
export envFrom = (envDict, key, config, t, msg, x) => partyBus(
  getEnvWithKey(key, envDict),
  config,
  t,
  msg,
  x,
)

// The following functions are untested because they rely upon Process.Env, which we can't guarantee from the test environment
/**
 * partyBus, but wired to the environment
 * @since 0.0.1
 */
keyedEnv :: String -> Config -> Tag -> String -> a -> a
export keyedEnv = envFrom(Process.Env)

/**
 * partyBus, but wired to the DEBUG value from the environment
 * @since 0.0.1
 */
bus :: Config -> Tag -> String -> a -> a
export bus = keyedEnv("DEBUG")

/**
 * partyBus, but wired to the DEBUG value with the styled
 * and dated config
 * @since 0.0.1
 */
env :: Show a => Tag -> String -> a -> a
export env = bus(DATED_CONFIG)

createTags :: String -> List (List String) -> List Tag
export createTags = (key, scopes) => pipe(
  map(tagWithScope(key)),
)(scopes)

createTagDictionary :: String -> Dictionary String (List String) -> Dictionary String Tag
export createTagDictionary = (key, scopes) => pipe(
  map(tagWithScope(key)),
)(scopes)
