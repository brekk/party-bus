import type { Comparison } from "Compare"

import type { Scope } from "@/Tag/Scope"

import { EQ, GT, LT } from "Compare"

import { NoScope, Scope, scopeWithinScope } from "@/Tag/Scope"



export type Tag = Tag(String, Scope)

export alias TagList = List Tag

instance Comparable Tag {
  compare = compareTag
}

compareTag :: Tag -> Tag -> Comparison
export compareTag = (a, b) => where(#[a, b]) {
  #[Tag(aName, NoScope), Tag(bName, _)] =>
    aName == bName ? GT : EQ

  #[Tag(aName, aScope), Tag(bName, bScope)] =>
    if (bName == aName) {
      if (scopeWithinScope(aScope, bScope)) {
        GT
      } else {
        LT
      }
    } else {
      LT
    }
}
