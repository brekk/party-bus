import type { Tag } from "@/Tag"

import { now, toISOString } from "Date"

import { colorize } from "Dye"

import { Tag, serialize } from "@/Tag"



/**
 * The condition of when a side-effect should run
 * @since 0.0.1
 */
export alias PartyPredicate a = Tag -> String -> a -> Boolean

/**
 * The side-effect to run
 * @since 0.0.1
 */
export alias SideEffect b = String -> b -> b

/**
 * The message decoration
 * @since 0.0.1
 */
export alias Decorator a = String -> Tag -> String -> a -> String

/**
 * The configuration of the signal
 * @since 0.0.1
 */
export alias Config = {
  change :: a -> b,
  check :: PartyPredicate a,
  decorate :: Decorator a,
  effect :: SideEffect b,
  seed :: String,
}

/**
 * The core function that does all the magic of PartyBus.
 * Conditionally call a side-effect with a specific tag, message and value.
 * @since 0.0.1
 */
signalWithConfig :: Config -> Tag -> String -> a -> a
export signalWithConfig = (conf, tag, message, x) => {
  return where(conf) {
    { seed, decorate, effect, change, check } =>
      do {
        msg = decorate(seed, tag, message, x)
        return if (check(tag, msg, x)) do {
          effect(msg, change(x))
          return x
        } else {
          x
        }
      }
  }
}

/**
 * A shorthand function to always fire the side-effect
 * @since 0.0.1
 */
always :: PartyPredicate a
export always = (_, _, _) => true

/**
 * A shorthand function to pass the message unchanged
 * @since 0.0.1
 */
decorateRaw :: Decorator a
export decorateRaw = (_, _, m, _) => m


/**
 * A means of colorizing a message by tag
 * @since 0.0.1
 */
colorizeTag :: String -> Tag -> String
export colorizeTag = (seed, x) => pipe(
  serialize,
  (tagId) => colorize(seed, " " ++ tagId ++ " "),
)(x)

/**
 * Color by tag and prepend to message
 * @since 0.0.1
 */
decorateWithStyle :: Decorator a
export decorateWithStyle = (seed, tag, message, _) => {
  idWithColor = colorizeTag(seed, tag)
  return idWithColor ++ " " ++ message
}

/**
 * Color by tag, add current time and prepend to message
 * @since 0.0.1
 */
decorateWithStyleAndDate :: Decorator a
export decorateWithStyleAndDate = (seed, tag, message, _) => {
  idWithColor = colorizeTag(seed, tag)
  return idWithColor ++ " " ++ toISOString(now()) ++ " â–¸ " ++ message
}

// (this currently has an issue w/r/t partial application - it works but not as well as it should)
/**
 * A sugar method to create a Config record, usually by partial application 
 * @since 0.0.1
 */
configurateWithSeed :: String
  -> Decorator a
  -> SideEffect b
  -> (a -> b)
  -> PartyPredicate a
  -> Config
export configurateWithSeed = (seed, decorate, effect, change, check) => (
  { seed, decorate, effect, change, check }
)

export configurate = configurateWithSeed("party-bus")

export confSeed = (seed, conf) => (
  { seed, effect: conf.effect, change: conf.change, check: conf.check, decorate: conf.decorate }
)

export confDecorator = (decorate, conf) => (
  { decorate, effect: conf.effect, change: conf.change, check: conf.check, seed: conf.seed }
)

export confEffect = (effect, conf) => (
  { decorate: conf.decorate, effect, change: conf.change, check: conf.check, seed: conf.seed }
)

export confChange = (change, conf) => (
  { change, decorate: conf.decorate, effect: conf.effect, check: conf.check, seed: conf.seed }
)

export confCheck = (check, conf) => (
  { check, decorate: conf.decorate, effect: conf.effect, change: conf.change, seed: conf.seed }
)
