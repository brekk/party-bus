import { mapWithKey, values } from "Dictionary"
import Term from "Terminal"
import { assertEquals, test } from "Test"
import { parallel } from "Wish"



// analyze :: (Show b, Eq b) => String -> (a -> b) -> Dictionary a b -> Wish TestResult TestResult
export analyze = (fn, name, testDict) => pipe(
  map(where { #[input, output] => assertEquals(fn(input), output) }),
  (cases) => test(
    name,
    () => do {
      _ <- parallel(cases)
      return assertEquals(true, true)
    },
  ),
)(testDict)

printReport = (name, i) => `${name}\n  â†³ ${
  pipe(
    show,
    Term.ansiColor([Term.ansi.FormatBold, Term.ansi.FGBrightYellow]),
  )(i)
}`

templateTest = (name, fn, i, o) => test(printReport(name, i), () => assertEquals(fn(i), o))

export report = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => templateTest(name, fn, i, o) }),
)(listInOut)

export reportBook = (fn, name, testDict) => pipe(
  mapWithKey(templateTest(name, fn)),
  values,
)(testDict)

caseN2 :: (a -> b -> c) -> #[a, b] -> c
export caseN2 = (fn, pair) => where(pair) {
  #[a, b] =>
    fn(a, b)
}
caseN3 :: (a -> b -> c -> d) -> #[a, b, c] -> d
export caseN3 = (fn, t3) => where(t3) {
  #[a, b, c] =>
    fn(a, b, c)
}
caseN4 :: (a -> b -> c -> d -> e) -> #[a, b, c, d] -> e
export caseN4 = (fn, t4) => where(t4) {
  #[a, b, c, d] =>
    fn(a, b, c, d)
}
caseN5 :: (a -> b -> c -> d -> e -> f) -> #[a, b, c, d, e] -> f
export caseN5 = (fn, t5) => where(t5) {
  #[a, b, c, d, e] =>
    fn(a, b, c, d, e)
}
