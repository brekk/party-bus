import Dict from "Dictionary"
import { identity } from "Function"
import IO from "IO"
import List from "List"
import Random from "Random"
// import { Just, fromMaybe } from "Maybe"
// import Process from "Process"
// import String from "String"
import Term from "Terminal"
import Wish from "Wish"

import Core from "@/Core"
import PB from "@/PartyBus"
import { tag, tagWithScope } from "@/Tag"



type BakedGoodKind = Pastry | Bread | Cake | Cookie | Muffin

alias BakedGood = { kind :: BakedGoodKind, name :: String, price :: Float, servings :: Integer }

baked :: BakedGoodKind -> String -> Integer -> Float -> BakedGood
baked = (kind, name, servings, price) => ({ name, kind, servings, price })

bread = baked(Bread)
pastry = baked(Pastry)
cake = baked(Cake)
cookie = baked(Cookie)

GOODS = {
  rusticBread: bread("Rustic", 1, 12),
  sourdough: bread("Sourdough", 1, 10),
  bagette: bread("Bagette", 1, 8),
  croissant: pastry("Croissant", 1, 6),
  painDuChocolat: pastry("Pain du chocolat", 1, 8),
  cookie: cookie("Chocolate Chip", 1, 4),
  cookies: cookie("Chocolate Chip", 4, 12),
}

TAGS = {
  bakery: tag("bakery"),
  sell: tagWithScope("bakery", ["sale"]),
  nested: tagWithScope("bakery", ["nested", "deeply"]),
}

solo = () => {
  sellLog = Core.signalWithConfig(
    {
      decorate: Core.decorateWithStyleAndDate,
      effect: IO.pTrace,
      change: .name,
      check: Core.always,
      seed: "my cool seed",
    },
    TAGS.sell,
  )
  sellLog("selling?", GOODS.cookie)
  sellTrace = PB.dateTaggedSignal(TAGS.sell)
  sellTrace("selling!", GOODS.rusticBread)
  logWithStyle = Core.configurate(Core.decorateWithStyle, IO.pTrace)
  bakeryLog = Core.signalWithConfig(logWithStyle(.price, Core.always), TAGS.bakery)
  bakeryLog("cost!", GOODS.painDuChocolat)
  expensiveLog = Core.signalWithConfig(
    Core.configurate(Core.decorateWithStyle, IO.pTrace, identity, (_, _, v) => v.price >= 8),
    TAGS.sell,
  )
  expensiveLog("single cookie doesn't log!", GOODS.cookie)
  expensiveLog("many cookies does log!", GOODS.cookies)
}

soloWithCheck = () => {
  PB.env(TAGS.bakery, "Give me a minute", { cool: "hooray!" })
  PB.bus(
    {
      decorate: PB.DATED_CONFIG.decorate,
      effect: PB.DATED_CONFIG.effect,
      change: PB.DATED_CONFIG.change,
      check: (_, _, v) => v.price > 8,
      seed: "my cool seed",
    },
    TAGS.sell,
    "cookies!!!",
    GOODS.cookies,
  )
}

main = () => {
  pipe(
    PB.env(TAGS.nested, "hey there!"),
  )("raw")
}
