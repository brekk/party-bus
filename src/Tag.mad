import type { Comparison } from "Compare"

import type { Scope } from "@/Tag/Scope"

import { EQ, GT, LT } from "Compare"
import List from "List"
import String from "String"

import { NoScope, Scope, scopeFromList, scopeToList, scopeWithinScope } from "@/Tag/Scope"



export type Tag = Tag(String, Scope)

instance Comparable Tag {
  compare = compareTag
}

compareTag :: Tag -> Tag -> Comparison
export compareTag = (a, b) => where(#[a, b]) {
  #[Tag(aName, NoScope), Tag(bName, _)] =>
    aName == bName ? GT : EQ

  #[Tag(aName, aScope), Tag(bName, bScope)] =>
    if (bName == aName) {
      if (scopeWithinScope(aScope, bScope)) {
        GT
      } else {
        LT
      }
    } else {
      LT
    }
}


// CONSTRUCTORS

tag :: String -> Tag
export tag = Tag($, NoScope)

tagWithScope :: String -> List String -> Tag
export tagWithScope = (t, xs) => Tag(t, scopeFromList(xs))

// METHODS

id :: Tag -> String
export id = where {
  Tag(n, _) =>
    n
}

hasScope :: Tag -> Boolean
export hasScope = where {
  Tag(_, NoScope) =>
    false

  _ =>
    true
}

getScope :: Tag -> Scope
export getScope = where {
  Tag(_, scope) =>
    scope
}

getConcreteScope :: Tag -> List String
export getConcreteScope = pipe(
  getScope,
  scopeToList,
)

serialize :: Tag -> String
export serialize = (t) => pipe(
  getConcreteScope,
  String.join(":"),
  (scope) => {
    i = id(t)
    return scope == "" ? i : i ++ ":" ++ scope
  },
)(t)
