import type { Tag } from "@/Tag/Type"

import { identity } from "Function"
import IO from "IO"

import { Tag } from "@/Tag/Type"



export alias PartyPredicate = Tag -> String -> a -> Boolean


invokeWithWhen :: (String -> b -> b) -> (a -> b) -> PartyPredicate -> Tag -> String -> a -> a
export invokeWithWhen = (effect, change, check, tag, message, x) => (
  if (!check(tag, message, x)) {
    x
  } else do {
    effect(message, change(x))
    return x
  }
)

always :: PartyPredicate
export always = (_, _, _) => true

// invoke always, with a specific scope
export invokeWith = invokeWithWhen($, $, always)
// invoke sometimes, with no change in scope
export invokeWhen = invokeWithWhen($, identity, $)
// invoke always, with no change in scope
export invoke = invokeWithWhen($, identity, always)

// common aliases with logging
export traceWith = invokeWith(IO.pTrace)
export traceWhen = invokeWhen(IO.pTrace)
export trace = invoke(IO.pTrace)
