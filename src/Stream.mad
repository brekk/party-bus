import type { Stream } from "Stream"
import type { Wish } from "Wish"

import type { Query } from "@/Query"
import type { Tag } from "@/Tag"

import { noop } from "Function"
import { append } from "List"
import { range, reduce, subscribe } from "Stream"
import { Wish } from "Wish"

import { Tag } from "@/Tag"



type Spout fail ev = Log(ev) | Jam(fail) | Consumed

// spout :: Stream Tag (Spout Tag Tag)
//   -> Wish (List (Spout Tag (Spout Tag Tag))) (List (Spout Tag (Spout Tag Tag)))
export spout = (stream) => {
  events = []
  push = (x) => {
    events := append(x, events)
    return events
  }
  return Wish(
    (bad, good) => {
      fail = pipe(
        Jam,
        push,
        bad,
        noop,
      )
      iter = pipe(
        Log,
        push,
        noop,
      )
      end = () => {
        good(push(Consumed))
      }
      subscribe(fail, iter, end)(stream)
      return () => {}
    },
  )
}
