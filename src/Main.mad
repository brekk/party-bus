import PB from "@/PartyBus"
import { tag, tagWithScope } from "@/Tag"



type BakedGoodKind = Pastry | Bread | Cookie

alias BakedGood = { kind :: BakedGoodKind, name :: String, price :: Float, servings :: Integer }

baked :: BakedGoodKind -> String -> Integer -> Float -> BakedGood
baked = (kind, name, servings, price) => ({ name, kind, servings, price })

bread = baked(Bread)
pastry = baked(Pastry)
cookie = baked(Cookie)

GOODS = {
  rusticBread: bread("Rustic", 1, 12),
  sourdough: bread("Sourdough", 1, 10),
  baguette: bread("Baguette", 1, 8),
  croissant: pastry("Croissant", 1, 6),
  painDuChocolat: pastry("Pain du chocolat", 1, 8),
  cookie: cookie("Chocolate Chip", 1, 4),
  cookies: cookie("Chocolate Chip", 4, 12),
}

TAGS = { bakery: tag("bakery"), sale: tagWithScope("bakery", ["counter", "sale"]) }

main = () => {
  PB.env(TAGS.bakery, "baked goods!", GOODS)
  // this logs only if the final item passes the predicate (.price > 8)
  PB.bus(
    PB.confCheck((_, _, v) => v.price > 8, PB.DATED_CONFIG),
    TAGS.sale,
    "cookies!!!",
    GOODS.cookies,
  )
}
