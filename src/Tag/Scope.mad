import { isEmpty } from "List"
import List from "List"
import Set from "Set"
import String from "String"



export type Scope = Scope(Set String) | NoScope

export checkScopeList = pipe(
  map(String.trim),
  List.reject(String.isEmpty),
  isEmpty,
)

scopeFromList :: List String -> Scope
export scopeFromList = (strs) => if (checkScopeList(strs)) {
  NoScope
} else {
  pipe(
    Set.fromList,
    Scope,
  )(strs)
}

scopeLength :: Scope -> Integer
export scopeLength = where {
  Scope(l) =>
    Set.length(l)

  NoScope =>
    0
}

scopeWithinScope :: Scope -> Scope -> Boolean
export scopeWithinScope = (a, z) => where(#[a, z]) {
  #[Scope(outer), Scope(inner)] =>
    pipe(
      Set.diff(outer),
      (d) => d == Set.empty,
    )(inner)

  #[_, _] =>
    false
}

concrete :: Scope -> List String
export concrete = where {
  Scope(raw) =>
    Set.toList(raw)

  _ =>
    []
}
